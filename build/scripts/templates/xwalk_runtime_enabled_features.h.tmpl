{% from "macros.tmpl" import wrap_with_condition, license -%}
{{ license() }}

#ifndef XWALK_RUNTIME_ENABLED_FEATURES_H_
#define XWALK_RUNTIME_ENABLED_FEATURES_H_

#include "base/command_line.h"
#include "xwalk_runtime_switches.h"

namespace xwalk {

// A class that stores static enablers for all experimental features.

class XWalkRuntimeEnabledFeatures {
public:

{%- for feature_set in feature_sets %}
    static void set{{feature_set|capitalize}}FeaturesEnabled(bool);
{%- endfor %}

{% for feature in features %}
    static void set{{feature.name}}Enabled(bool isEnabled) { is{{feature.name}}Enabled = isEnabled; }
    static bool {{feature.name}}Enabled() {
        // The command line argument always override our default.
        CommandLine* cmd_line = CommandLine::ForCurrentProcess();
        if (cmd_line->HasSwitch(switches::kEnable{{feature.name}})) {
            return true;
        } else if (cmd_line->HasSwitch(switches::kDisable{{feature.name}})) {
            return false;
        }
        return {{feature.enabled_condition}};
    }
{% endfor %}

private:
    XWalkRuntimeEnabledFeatures() { }
{% for feature in features %}
{%- call wrap_with_condition(feature.condition) %}
    static bool is{{feature.name}}Enabled;
{%- endcall %}
{%- endfor %}
};

} // namespace xwalk

#endif // XWALK_RUNTIME_ENABLED_FEATURES_H_
