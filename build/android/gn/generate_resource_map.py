#!/usr/bin/env python

# Copyright (c) 2014 Intel Corporation. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import optparse
import os
import re
import shutil
import sys

import zipfile

GYP_ANDROID_DIR = os.path.join(os.path.dirname(__file__),
                               os.pardir, os.pardir, os.pardir, os.pardir,
                               'build',
                               'android',
                               'gyp')
sys.path.append(GYP_ANDROID_DIR)

from util import build_utils

def WriteResourceMap(r_java, res_map):
  package_regex = re.compile('^package ([a-zA-Z0-9_\.]*);$')
  package = ''
  output_content = []
  for line in open(r_java, 'r').readlines():
    if not package:
      package_match = package_regex.match(line)
      if package_match:
        package = package_match.group(1)
    output_content.append(re.sub(r'\s*=\s*0x[0-9a-f]{8};', ';', line))
  output_path = os.path.join(res_map, os.path.sep.join(package.split('.')))
  if not os.path.isdir(output_path):
    os.makedirs(output_path)
  with open(os.path.join(output_path, 'R.java'), 'w') as output:
    output.write(''.join(output_content))

def WriteRDotTxt(r_txt, res_map):
  output_content = []
  for line in open(r_txt, 'r').readlines():
    output_content.append(line)
  output_path = os.path.join(res_map, 'R.txt')
  if not os.path.isdir(output_path):
    os.makedirs(output_path)
  with open(os.path.join(output_path, 'R.txt'), 'w') as output:
    output.write(''.join(output_content))


def GenerateRDotTxt(gen_dir, resource_map_dir, stamp):
  if not os.path.isdir(gen_dir):
    return 1
  if os.path.exists(resource_map_dir):
    shutil.rmtree(resource_map_dir)
  os.makedirs(resource_map_dir)
  for root, _, files in os.walk(gen_dir):
    if os.path.basename(root) == 'core':
      continue
    for fname in files:
      if fname.find('resources_R.txt') != -1:
        r_txt = os.path.join(root, fname)
        WriteRDotTxt(r_txt, resource_map_dir)
  build_utils.Touch(options.stamp)

def GenerateRDotJava(gen_dir, resource_map_dir, stamp):
  if not os.path.isdir(gen_dir):
    return 1
  if os.path.exists(resource_map_dir):
    shutil.rmtree(resource_map_dir)
  os.makedirs(resource_map_dir)

  srcjars= [
    ('gen/components/web_contents_delegate_android/'+
     'web_contents_delegate_android_java_resources.srcjar',
     'org/chromium/components/web_contents_delegate_android/R.java'),
    ('gen/ui/android/ui_java_resources.srcjar',
     'org/chromium/ui/R.java'),
    ('gen/xwalk/runtime/android/core_internal/'+
     'xwalk_core_internal_java_resources.srcjar',
     'org/xwalk/core/internal/R.java'),
    ('gen/content/public/android/content_java_resources.srcjar',
     'org/chromium/content/R.java'),
  ]

  for (srcjar, java_file) in srcjars:
    # Extract
    with build_utils.TempDir() as temp_dir:
      with zipfile.ZipFile(srcjar) as z:
        z.extractall(temp_dir)
        # Concatenate 'R.java'
        WriteResourceMap(os.path.join(temp_dir, java_file), resource_map_dir)
  build_utils.Touch(stamp)

def main():
  # R.txt is generated by core_empty_embedder apk.
  GenerateRDotJava('gen', 'resource_map', 'resource.stamp')

if __name__ == '__main__':
  sys.exit(main())
