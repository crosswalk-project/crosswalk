Author: Raphael Kubo da Costa <raphael.kubo.da.costa@intel.com>

This patch is part of a hack to allow us to split Crosswalk into two separate
packages, crosswalk-libs (with Chromium shared libraries and all dependencies
required by Crosswalk itself) and crosswalk-bin (with the Crosswalk binaries).

If passes "--define build_libs 0" to the spec file, crosswalk-libs will not be
built and we assume it is already installed. This patch is then applied to the
source tree to make big targets that used to consume a lot of time and CPU by
generating and building a lot of files do nothing but pass "-l<some_target>" to
the linker. In other words, we cheat the build system into thinking those
targets do not need to build anything.

Not all targets can be converted like this, and keeping the patch up-to-date
across Chromium releases requires manual intervention. Some rules of thumb:

* Only targets whose original type is '<(component)' or 'shared_library' can be
  converted like this. 'static_library' targets are expected to remain static
  (technically it is possible to convert them, but then the hack gets even
  bigger and there is no guarantee that a certain target is expected to work as
  a shared library in the first place). If they are part of a shared library we
  have converted they will not need to be built at all, and if a target in
  Crosswalk itself requires them the static library will need to exist anyway.

* 'direct_dependent_settings' need to be maintained, as targets that depend on
  a converted one still need include paths and other things specified there.

* 'export_depent_settings' and 'all_dependent_settings' need to be preserved
  for the same reason: a target that depends on the converted one may still
  need other libraries that it does not depend on directly. Consequently, this
  means that a certain amount of targets in 'dependencies' also need to be
  kept, since a target must be in the 'dependencies' list to be in
  '*_dependent_settings'.

* 'actions' need to be removed from the original target, as otherwise there is
  more than one target that generates the same files.

* Some target dependencies may be needed even if they are not in one of the
  '*_dependent_settings' lists. For example, targets that generate code, like
  the mojo ones.

* Some gyp files are trickier than others. contents.gyp and skia.gyp, for
  example, get a lot of additional settings from the .gypi files that they
  include. This all needs to be carefully examined when updating the patch.

The best way to make sure the patch still works with a newer Chromium release
is to call `gbs build' with `--define build_bin 0' first so that only
crosswalk-libs is generated, then install/upgrade that package and finally call
`gbs build' with `--define build_libs 0' to build only crosswalk-bin. In the
best case, everything still builds and the total number of targets is still
similar to the previous count. If that is not the case, you need to check which
Crosswalk targets have started depending on others from Chromium and, if
possible, convert some of them.

BUG=XWALK-2571
--- src/base/base.gyp
+++ src/base/base.gyp
@@ -13,6 +13,74 @@
   'targets': [
     {
       'target_name': 'base',
+      'type': 'none',
+      'toolsets': ['host', 'target'],
+      'link_settings': {
+        'libraries': [
+          '-lbase',
+        ],
+      },
+      # TODO(gregoryd): direct_dependent_settings should be shared with the
+      #  64-bit target, but it doesn't work due to a bug in gyp
+      'direct_dependent_settings': {
+        'include_dirs': [
+          '..',
+        ],
+      },
+      'conditions': [
+        ['use_glib==1 or <(use_ozone)==1', {
+          'dependencies': [
+            '../build/linux/system.gyp:glib',
+          ],
+          'export_dependent_settings': [
+            '../build/linux/system.gyp:glib',
+          ],
+        }],
+        ['OS == "linux"', {
+          'link_settings': {
+            'libraries': [
+              # We need rt for clock_gettime().
+              '-lrt',
+              # For 'native_library_linux.cc'
+              '-ldl',
+            ],
+          },
+        }],
+      ],
+    },
+    {
+      'target_name': 'base_i18n',
+      'type': 'none',
+      'link_settings': {
+        'libraries': [
+          '-lbase_i18n',
+        ],
+      },
+      'dependencies': [
+        'base',
+      ],
+      'export_dependent_settings': [
+        'base',
+      ],
+    },
+    {
+      'target_name': 'base_prefs',
+      'type': 'none',
+      'link_settings': {
+        'libraries': [
+          '-lbase_prefs',
+        ],
+      },
+      'dependencies': [
+        'base',
+      ],
+      'export_dependent_settings': [
+        'base',
+      ],
+    },
+
+    {
+      'target_name': 'base_original',
       'type': '<(component)',
       'toolsets': ['host', 'target'],
       'variables': {
@@ -256,7 +323,7 @@
       ],
     },
     {
-      'target_name': 'base_i18n',
+      'target_name': 'base_i18n_original',
       'type': '<(component)',
       'variables': {
         'enable_wexit_time_destructors': 1,
@@ -308,7 +375,7 @@
       ],
     },
     {
-      'target_name': 'base_prefs',
+      'target_name': 'base_prefs_original',
       'type': '<(component)',
       'variables': {
         'enable_wexit_time_destructors': 1,
--- src/cc/cc.gyp
+++ src/cc/cc.gyp
@@ -10,6 +10,21 @@
     {
       # GN version: //cc
       'target_name': 'cc',
+      'type': 'none',
+      'link_settings': {
+        'libraries': [
+          '-lcc',
+        ],
+      },
+      # Include src/gpu for gl2chromium.h.
+      'dependencies': [
+        '../third_party/khronos/khronos.gyp:khronos_headers',
+      ],
+    },
+
+    {
+      # GN version: //cc
+      'target_name': 'cc_original',
       'type': '<(component)',
       'dependencies': [
         '<(DEPTH)/base/base.gyp:base',
--- src/content/content.gyp
+++ src/content/content.gyp
@@ -21,6 +21,69 @@
       }],
     ],
   },
+
+  'targets': [
+    {
+      # GN version: //content
+      'target_name': 'content',
+      'type': 'none',
+      'link_settings': {
+        'libraries': [
+          '-lcontent',
+        ],
+      },
+
+      'dependencies': [
+        '../ui/accessibility/accessibility.gyp:ax_gen',
+        '../third_party/WebKit/public/blink_headers.gyp:blink_headers',
+        '../skia/skia.gyp:skia',
+
+        '../device/battery/battery.gyp:device_battery_mojo_bindings',
+        '../device/vibration/vibration.gyp:device_vibration_mojo_bindings',
+        '../mojo/mojo_base.gyp:mojo_application_bindings',
+        '../mojo/mojo_base.gyp:mojo_environment_chromium',
+        '../third_party/mojo/mojo_edk.gyp:mojo_system_impl',
+        '../third_party/mojo/mojo_public.gyp:mojo_cpp_bindings',
+        'content_common_mojo_bindings.gyp:content_common_mojo_bindings',
+      ],
+      'export_dependent_settings': [
+        '../ui/accessibility/accessibility.gyp:ax_gen',
+        # The public content API headers directly include Blink API headers, so we
+        # have to export the blink header settings so that relative paths in these
+        # headers resolve correctly.
+        '../third_party/WebKit/public/blink_headers.gyp:blink_headers',
+        # The public render_widget_host.h needs to re-export skia defines.
+        '../skia/skia.gyp:skia',
+        'content_common_mojo_bindings.gyp:content_common_mojo_bindings',
+      ],
+
+      'actions': [
+        {
+          'action_name': 'generate_webkit_version',
+          'inputs': [
+            '<(script)',
+            '<(lastchange)',
+            '<(template)',
+          ],
+          'outputs': [
+            '<(SHARED_INTERMEDIATE_DIR)/webkit_version.h',
+          ],
+          'action': ['python',
+                     '<(script)',
+                     '-f', '<(lastchange)',
+                     '<(template)',
+                     '<@(_outputs)',
+          ],
+          'variables': {
+            'script': '<(DEPTH)/build/util/version.py',
+            'lastchange': '<(DEPTH)/build/util/LASTCHANGE.blink',
+            'template': 'webkit_version.h.in',
+          },
+        },
+      ],
+    },
+  ],
+
   'conditions': [
     ['OS != "ios"', {
       'includes': [
@@ -291,7 +349,7 @@
       'targets': [
         {
           # GN version: //content
-          'target_name': 'content',
+          'target_name': 'content_original',
           'type': 'shared_library',
           'variables': { 'enable_wexit_time_destructors': 1, },
           'dependencies': [
--- src/content/content_common.gypi
+++ src/content/content_common.gypi
@@ -569,30 +569,6 @@
         '../ui/gl/gl.gyp:gl',
         '../webkit/common/gpu/webkit_gpu.gyp:webkit_gpu',
       ],
-      'actions': [
-        {
-          'action_name': 'generate_webkit_version',
-          'inputs': [
-            '<(script)',
-            '<(lastchange)',
-            '<(template)',
-          ],
-          'outputs': [
-            '<(SHARED_INTERMEDIATE_DIR)/webkit_version.h',
-          ],
-          'action': ['python',
-                     '<(script)',
-                     '-f', '<(lastchange)',
-                     '<(template)',
-                     '<@(_outputs)',
-          ],
-          'variables': {
-            'script': '<(DEPTH)/build/util/version.py',
-            'lastchange': '<(DEPTH)/build/util/LASTCHANGE.blink',
-            'template': 'webkit_version.h.in',
-          },
-        },
-      ],
     }],
     ['OS=="mac"', {
       'dependencies': [
--- src/gpu/gpu.gyp
+++ src/gpu/gpu.gyp
@@ -11,6 +11,17 @@
   ],
   'targets': [
     {
+      # GN version: //gpu
+      'target_name': 'gpu',
+      'type': 'none',
+      'link_settings': {
+        'libraries': [
+          '-lgpu',
+        ],
+      },
+    },
+
+    {
       # Library emulates GLES2 using command_buffers.
       # GN version: //gpu/command_buffer/client:gles2_implementation
       'target_name': 'gles2_implementation',
@@ -522,7 +533,7 @@
         },
         {
           # GN version: //gpu
-          'target_name': 'gpu',
+          'target_name': 'gpu_original',
           'type': 'shared_library',
           'includes': [
             'command_buffer_client.gypi',
--- src/media/media.gyp
+++ src/media/media.gyp
@@ -49,6 +49,22 @@
     {
       # GN version: //media
       'target_name': 'media',
+      'type': 'none',
+      'link_settings': {
+        'libraries': [
+          '-lmedia',
+        ],
+      },
+      'direct_dependent_settings': {
+        'include_dirs': [
+          '..',
+        ],
+      },
+    },
+
+    {
+      # GN version: //media
+      'target_name': 'media_original',
       'type': '<(component)',
       'dependencies': [
         '../base/base.gyp:base',
--- src/third_party/mojo/mojo_edk.gyp
+++ src/third_party/mojo/mojo_edk.gyp
@@ -10,6 +10,21 @@
     {
       # GN version: //mojo/edk/system
       'target_name': 'mojo_system_impl',
+      'type': 'none',
+      'link_settings': {
+        'libraries': [
+          '-lmojo_system_impl',
+        ],
+      },
+      'all_dependent_settings': {
+        # Ensures that dependent projects import the core functions on Windows.
+        'defines': ['MOJO_USE_SYSTEM_IMPL'],
+      },
+    },
+
+    {
+      # GN version: //mojo/edk/system
+      'target_name': 'mojo_system_original',
       'type': '<(component)',
       'dependencies': [
         '../base/base.gyp:base',
--- src/net/net.gyp
+++ src/net/net.gyp
@@ -104,6 +104,41 @@
     },
     {
       'target_name': 'net',
+      'type': 'none',
+      'link_settings': {
+        'libraries': [
+          '-lnet',
+        ],
+      },
+      'dependencies': [
+        '../base/base.gyp:base',
+      ],
+      'export_dependent_settings': [
+        '../base/base.gyp:base',
+      ],
+      'conditions': [
+        ['use_kerberos==1', {
+          'conditions': [
+            ['linux_link_kerberos==1', {
+              'link_settings': {
+                'ldflags': [
+                  '<!@(krb5-config --libs gssapi)',
+                ],
+              },
+            }],
+          ],
+        }],
+        ['posix_avoid_mmap==1', {
+          'direct_dependent_settings': {
+            'defines': [
+              'POSIX_AVOID_MMAP',
+            ],
+          },
+        }],
+      ],
+    },
+    {
+      'target_name': 'net_original',
       'dependencies': [
         '../base/base.gyp:base_i18n',
         '../third_party/icu/icu.gyp:icui18n',
@@ -842,6 +842,15 @@
       'targets': [
         {
           'target_name': 'net_with_v8',
+          'type': 'none',
+          'link_settings': {
+            'libraries': [
+              '-lnet_with_v8',
+            ],
+          },
+        },
+        {
+          'target_name': 'net_with_v8_original',
           'type': '<(component)',
           'variables': { 'enable_wexit_time_destructors': 1, },
           'dependencies': [
--- src/ppapi/ppapi_internal.gyp
+++ src/ppapi/ppapi_internal.gyp
@@ -35,6 +35,38 @@
     {
       # GN version: //ppapi:ppapi_shared
       'target_name': 'ppapi_shared',
+      'type': 'none',
+      'link_settings': {
+        'libraries': [
+          '-lppapi_shared',
+        ],
+      },
+      'dependencies': [
+        '../base/base.gyp:base',
+      ],
+      'export_dependent_settings': [
+        '../base/base.gyp:base',
+      ],
+    },
+    {
+      # GN version: //ppapi:ppapi_proxy
+      'target_name': 'ppapi_proxy',
+      'type': 'none',
+      'link_settings': {
+        'libraries': [
+          '-lppapi_proxy',
+        ],
+      },
+      'all_dependent_settings': {
+        'include_dirs': [
+            '..',
+        ],
+      },
+    },
+
+    {
+      # GN version: //ppapi:ppapi_shared
+      'target_name': 'ppapi_shared_original',
       'type': '<(component)',
       'variables': {
         # Set the ppapi_shared_target variable, so that we will pull in the
@@ -164,7 +196,7 @@
       'targets': [
         {
           # GN version: //ppapi:ppapi_proxy
-          'target_name': 'ppapi_proxy',
+          'target_name': 'ppapi_proxy_original',
           'type': 'shared_library',
           'variables': {
             # Setting both variables means we pull in the sources from both
--- src/skia/skia.gyp
+++ src/skia/skia.gyp
@@ -62,7 +62,56 @@
       'targets': [
         {
           'target_name': 'skia',
-          'type': 'shared_library',
+          'type': 'none',
+          'link_settings': {
+            'libraries': [
+              '-lskia',
+            ],
+          },
+          'direct_dependent_settings': {
+            'defines': [
+              'SKIA_DLL',
+              'GR_GL_IGNORE_ES3_MSAA=0',
+
+              # From skia_common.gypi:
+              # For POSIX platforms, prefer the Mutex implementation provided
+              # by Skia since it does not generate static initializers.
+              'SK_USE_POSIX_THREADS',
+
+              '<@(skia_export_defines)',
+            ],
+          },
+          'includes': [
+            'skia_common.gypi',
+          ],
+
+          'direct_dependent_settings': {
+            'include_dirs': [
+              #temporary until we can hide SkFontHost
+              '../third_party/skia/src/core',
+
+              '../third_party/skia/include/core',
+              '../third_party/skia/include/effects',
+              '../third_party/skia/include/pdf',
+              '../third_party/skia/include/gpu',
+              '../third_party/skia/include/lazy',
+              '../third_party/skia/include/pathops',
+              '../third_party/skia/include/pipe',
+              '../third_party/skia/include/ports',
+              '../third_party/skia/include/utils',
+            ],
+          },
+        },
+
+        {
+          'target_name': 'skia_original',
+          'type': 'none',
+          'link_settings': {
+            'libraries': [
+              '-lskia',
+            ],
+          },
+
           'includes': [
             'skia_library.gypi',
             'skia_chrome.gypi',
--- src/storage/storage_browser.gyp
+++ src/storage/storage_browser.gyp
@@ -10,6 +10,17 @@
     {
       # GN version: //storage/browser
       'target_name': 'storage',
+      'type': 'none',
+      'link_settings': {
+        'libraries': [
+          '-lstorage',
+        ],
+      },
+    },
+
+    {
+      # GN version: //storage/browser
+      'target_name': 'storage_original',
       'type': '<(component)',
       'variables': { 'enable_wexit_time_destructors': 1, },
       'dependencies': [
--- src/storage/storage_common.gyp
+++ src/storage/storage_common.gyp
@@ -10,6 +10,17 @@
     {
       # GN version: //storage/common
       'target_name': 'storage_common',
+      'type': 'none',
+      'link_settings': {
+        'libraries': [
+          '-lstorage_common',
+        ],
+      },
+    },
+
+    {
+      # GN version: //storage/common
+      'target_name': 'storage_common_original',
       'type': '<(component)',
       'variables': { 'enable_wexit_time_destructors': 1, },
       'dependencies': [
--- src/sync/sync.gyp
+++ src/sync/sync.gyp
@@ -27,12 +27,27 @@
         'sync_proto',
       ],
     },
+    {
+      'target_name': 'sync_core',
+      'type': 'none',
+      'link_settings': {
+        'libraries': [
+          '-lsync_core',
+        ],
+      },
+      'dependencies': [
+        'sync_proto',
+      ],
+      'export_dependent_settings': [
+        'sync_proto',
+      ],
+    },
 
     # Contains everything related to sync implementation that does not depend
     # on chrome/ or components/.  Do not depend on this directly.  Depend on
     # the 'sync' target to get the sync protobufs, too.
     {
-      'target_name': 'sync_core',
+      'target_name': 'sync_core_original',
       'type': '<(component)',
       'variables': { 'enable_wexit_time_desctructors': 1, },
       'defines': [
--- src/third_party/WebKit/public/blink.gyp
+++ src/third_party/WebKit/public/blink.gyp
@@ -36,17 +36,18 @@
             # GN version: //third_party/WebKit/public:blink
             'target_name': 'blink',
             'type': 'none',
-            'dependencies': [
-                '../Source/platform/blink_platform.gyp:blink_platform',
-                '../Source/web/web.gyp:blink_web',
-                'blink_headers.gyp:blink_headers',
-                'blink_minimal',
-            ],
-            'export_dependent_settings': [
-                '../Source/web/web.gyp:blink_web',
-                '../Source/platform/blink_platform.gyp:blink_platform',
-                'blink_minimal',
-            ],
+            'direct_dependent_settings': {
+                'include_dirs': [
+                    '..',
+                ],
+            },
+            'link_settings': {
+                'libraries': [
+                    '-lblink_common',
+                    '-lblink_web',
+                    '-lblink_platform',
+                ],
+            },
         },
         {
             # This target provides a minimal set of Blink APIs such as WebString to use in
--- src/third_party/angle/src/compiler.gypi
+++ src/third_party/angle/src/compiler.gypi
@@ -236,6 +236,16 @@
 
         {
             'target_name': 'translator',
+            'type': 'none',
+            'link_settings': {
+              'libraries': [
+                '-ltranslator',
+              ],
+            },
+        },
+
+        {
+            'target_name': 'translator_original',
             'type': '<(component)',
             'dependencies': [ 'translator_lib' ],
             'includes': [ '../build/common_defines.gypi', ],
--- src/third_party/ffmpeg/ffmpeg.gyp
+++ src/third_party/ffmpeg/ffmpeg.gyp
@@ -168,6 +168,27 @@
 
   'targets': [{
     'target_name': 'ffmpeg',
+    'type': 'none',
+    'link_settings': {
+      'libraries': [
+        '-lffmpeg',
+      ],
+    },
+    'variables': {
+      # Path to platform configuration files.
+      'platform_config_root': 'chromium/config/<(ffmpeg_branding)/<(os_config)/<(ffmpeg_config)',
+    },
+    'direct_dependent_settings': {
+      'include_dirs': [
+        '../..',  # The chromium 'src' directory.
+        '<(platform_config_root)',
+        '.',
+      ],
+    },
+  },
+
+  {
+    'target_name': 'ffmpeg_original',
     'type': '<(ffmpeg_component)',
     'variables': {
       # Path to platform configuration files.
--- src/third_party/icu/icu.gyp
+++ src/third_party/icu/icu.gyp
@@ -171,6 +171,37 @@
         },
         {
           'target_name': 'icui18n',
+          'type': 'none',
+          'toolsets': ['host', 'target'],
+          'link_settings': {
+            'libraries': [
+              '-licui18n',
+            ],
+          },
+          'direct_dependent_settings': {
+            'include_dirs': [
+              'source/i18n',
+            ],
+          },
+        },
+        {
+          'target_name': 'icuuc',
+          'type': 'none',
+          'toolsets': ['host', 'target'],
+          'link_settings': {
+            'libraries': [
+              '-licuuc',
+            ],
+          },
+          'direct_dependent_settings': {
+            'include_dirs': [
+              'source/common',
+            ],
+          },
+        },
+
+        {
+          'target_name': 'icui18n_original',
           'type': '<(component)',
           'sources': [
             '<@(icui18n_sources)',
@@ -259,7 +288,7 @@
           ], # conditions
         },
         {
-          'target_name': 'icuuc',
+          'target_name': 'icuuc_original',
           'type': '<(component)',
           'sources': [
             '<@(icuuc_sources)',
--- src/ui/aura/aura.gyp
+++ src/ui/aura/aura.gyp
@@ -10,6 +10,17 @@
     {
       # GN version: //ui/aura
       'target_name': 'aura',
+      'type': 'none',
+      'link_settings': {
+        'libraries': [
+          '-laura',
+        ],
+      },
+    },
+
+    {
+      # GN version: //ui/aura
+      'target_name': 'aura_original',
       'type': '<(component)',
       'dependencies': [
         '../../base/base.gyp:base',
--- src/ui/base/ui_base.gyp
+++ src/ui/base/ui_base.gyp
@@ -10,6 +10,25 @@
     {
       # GN version: //ui/base
       'target_name': 'ui_base',
+      'type': 'none',
+      'link_settings': {
+        'libraries': [
+          '-lui_base',
+        ],
+      },
+      'dependencies': [
+        '../../net/net.gyp:net',
+        '../gfx/gfx.gyp:gfx',
+      ],
+      'export_dependent_settings': [
+        '../../net/net.gyp:net',
+        '../gfx/gfx.gyp:gfx',
+      ],
+    },
+
+    {
+      # GN version: //ui/base
+      'target_name': 'ui_base_original',
       'type': '<(component)',
       'dependencies': [
         '../../base/base.gyp:base',
--- src/ui/gfx/gfx.gyp
+++ src/ui/gfx/gfx.gyp
@@ -8,6 +8,26 @@
   },
   'targets': [
     {
+      'target_name': 'gfx',
+      'type': 'none',
+      'dependencies': [
+        '<(DEPTH)/skia/skia.gyp:skia',
+        '<(DEPTH)/third_party/icu/icu.gyp:icui18n',
+        '<(DEPTH)/third_party/icu/icu.gyp:icuuc',
+      ],
+      'export_dependent_settings': [
+        '<(DEPTH)/skia/skia.gyp:skia',
+        '<(DEPTH)/third_party/icu/icu.gyp:icui18n',
+        '<(DEPTH)/third_party/icu/icu.gyp:icuuc',
+      ],
+      'link_settings': {
+        'libraries': [
+          '-lgfx',
+        ],
+      },
+    },
+
+    {
       'target_name': 'gfx_geometry',
       'type': '<(component)',
       'dependencies': [
@@ -69,7 +89,7 @@
       ],
     },
     {
-      'target_name': 'gfx',
+      'target_name': 'gfx_original',
       'type': '<(component)',
       'dependencies': [
         '<(DEPTH)/base/base.gyp:base',
--- src/ui/gl/gl.gyp
+++ src/ui/gl/gl.gyp
@@ -10,6 +10,25 @@
   'targets': [
     {
       'target_name': 'gl',
+      'type': 'none',
+      'link_settings': {
+        'libraries': [
+          '-lgl_wrapper',
+        ],
+      },
+      'product_name': 'gl_wrapper',  # Avoid colliding with OS X's libGL.dylib
+      'dependencies': [
+        '<(DEPTH)/third_party/mesa/mesa.gyp:mesa_headers',
+      ],
+      'variables': {
+        'gl_binding_output_dir': '<(SHARED_INTERMEDIATE_DIR)/ui/gl',
+      },
+      'export_dependent_settings': [
+        '<(DEPTH)/third_party/mesa/mesa.gyp:mesa_headers',
+      ],
+    },
+    {
+      'target_name': 'gl_original',
       'type': '<(component)',
       'product_name': 'gl_wrapper',  # Avoid colliding with OS X's libGL.dylib
       'dependencies': [
--- src/ui/views/views.gyp
+++ src/ui/views/views.gyp
@@ -570,6 +570,28 @@
     {
       # GN version: //ui/views
       'target_name': 'views',
+      'type': 'none',
+      'link_settings': {
+        'libraries': [
+          '-lviews',
+        ],
+      },
+      'dependencies': [
+        '../accessibility/accessibility.gyp:ax_gen',
+      ],
+      'all_dependent_settings': {
+        'defines': [
+          'TOOLKIT_VIEWS=1',
+        ],
+      },
+      'export_dependent_settings': [
+        '../accessibility/accessibility.gyp:ax_gen',
+      ],
+    }, # target_name: views
+
+    {
+      # GN version: //ui/views
+      'target_name': 'views_original',
       'type': '<(component)',
       'dependencies': [
         '../../base/base.gyp:base',
--- src/ui/wm/wm.gyp
+++ src/ui/wm/wm.gyp
@@ -10,6 +10,17 @@
     {
       # GN version: //ui/wm
       'target_name': 'wm',
+      'type': 'none',
+      'link_settings': {
+        'libraries': [
+          '-lwm',
+        ],
+      },
+    },
+
+    {
+      # GN version: //ui/wm
+      'target_name': 'wm_original',
       'type': '<(component)',
       'dependencies': [
         '../../base/base.gyp:base',
--- src/v8/tools/gyp/v8.gyp
+++ src/v8/tools/gyp/v8.gyp
@@ -35,6 +35,21 @@
   'targets': [
     {
       'target_name': 'v8',
+      'type': 'none',
+      'link_settings': {
+        'libraries': [
+          '-lv8',
+        ],
+      },
+      'direct_dependent_settings': {
+        'include_dirs': [
+          '../../include',
+        ],
+      },
+    },
+
+    {
+      'target_name': 'v8_original',
       'dependencies_traverse': 1,
       'conditions': [
         ['want_separate_host_toolset==1', {
